<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DNet.Core</name>
    </assembly>
    <members>
        <member name="T:DNet.Core.AOP.BlogCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="T:DNet.Core.AOP.BlogLogAOP">
            <summary>
            拦截器BlogLogAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:DNet.Core.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:DNet.Core.AOP.BlogRedisCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="T:DNet.Core.AOP.BlogTranAOP">
            <summary>
            事务拦截器BlogTranAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:DNet.Core.AOP.BlogTranAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:DNet.Core.AOP.BlogUserAuditAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="M:DNet.Core.AOP.CacheAOPbase.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            AOP的拦截方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:DNet.Core.AOP.CacheAOPbase.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存的key
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:DNet.Core.AOP.CacheAOPbase.GetArgumentValue(System.Object)">
            <summary>
            object 转 string
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:DNet.Core.AuthHelper.OverWrite.JwtHelper.IssueJwt(DNet.Core.AuthHelper.OverWrite.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:DNet.Core.AuthHelper.OverWrite.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:DNet.Core.AuthHelper.OverWrite.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.OverWrite.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.OverWrite.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.OverWrite.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:DNet.Core.AuthHelper.JwtTokenAuth">
            <summary>
            中间件
            原做为自定义授权中间件
            先做检查 header token的使用
            </summary>
        </member>
        <member name="F:DNet.Core.AuthHelper.JwtTokenAuth._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:DNet.Core.AuthHelper.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:DNet.Core.AuthHelper.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:DNet.Core.AuthHelper.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:DNet.Core.AuthHelper.JwtToken.BuildJwtToken(System.Security.Claims.Claim[],DNet.Core.AuthHelper.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="permissionRequirement">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:DNet.Core.AuthHelper.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="M:DNet.Core.AuthHelper.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,DNet.Core.IServices.IRoleModulePermissionServices,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="accessor"></param>
        </member>
        <member name="T:DNet.Core.AuthHelper.PermissionItem">
            <summary>
            用户或角色或其他凭据实体,就像是订单详情一样
            之前的名字是 Permission
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:DNet.Core.AuthHelper.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:DNet.Core.AuthHelper.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:DNet.Core.AuthHelper.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{DNet.Core.AuthHelper.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="T:DNet.Core.AutoMapper.AutoMapperConfig">
            <summary>
            静态全局 AutoMapper 配置文件
            </summary>
        </member>
        <member name="M:DNet.Core.AutoMapper.CustomProfile.#ctor">
            <summary>
            配置构造函数，用来创建关系映射
            </summary>
        </member>
        <member name="T:DNet.Core.Controllers.LoginController">
            <summary>
            登录管理
            </summary>
        </member>
        <member name="M:DNet.Core.Controllers.LoginController.#ctor(DNet.Core.IServices.ISysUserInfoServices,DNet.Core.IServices.IUserRoleServices,DNet.Core.IServices.IRoleServices,DNet.Core.AuthHelper.PermissionRequirement,DNet.Core.IServices.IRoleModulePermissionServices)">
            <summary>
            构造函数注入
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="requirement"></param>
            <param name="roleModulePermissionServices"></param>
        </member>
        <member name="M:DNet.Core.Controllers.LoginController.Md5Password(System.String)">
            <summary>
            测试 MD5 加密字符串
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:DNet.Core.Extensions.AppConfigSetup">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.AuthorizationSetup">
            <summary>
            Db 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.Authorization_Ids4Setup">
            <summary>
            权限 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.AutoMapperSetup">
            <summary>
            Automapper 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.ControllerSetup">
            <summary>
            启动controller服务
            </summary>
        </member>
        <member name="M:DNet.Core.Extensions.ControllerSetup.AddControllerSetup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册controller
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:DNet.Core.Extensions.CorsSetup">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.DbSetup">
            <summary>
            Db 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.HttpContextSetup">
            <summary>
            Db 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.IpPolicyRateLimitSetup">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.JobSetup">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.MemoryCacheSetup">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.MiniProfilerSetup">
            <summary>
            MiniProfiler 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.SqlsugarSetup">
            <summary>
            SqlSugar 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.SwaggerSetup">
            <summary>
            Swagger 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Extensions.WebApiClientSetup">
            <summary>
            WebApiClientSetup 启动服务
            </summary>
        </member>
        <member name="M:DNet.Core.Extensions.WebApiClientSetup.AddHttpApi(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册WebApiClient接口
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:DNet.Core.Extensions.AllServicesMidd">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:DNet.Core.Filter.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:DNet.Core.Filter.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:DNet.Core.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:DNet.Core.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:DNet.Core.Filter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:DNet.Core.Filter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:DNet.Core.Filter.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
        <member name="T:DNet.Core.Middlewares.IPLogMidd">
            <summary>
            中间件
            记录IP请求数据
            </summary>
        </member>
        <member name="F:DNet.Core.Middlewares.IPLogMidd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:DNet.Core.Middlewares.IPLogMidd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:DNet.Core.Middlewares.MiddlewareHelpers.UseJwtTokenAuth(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            自定义授权中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:DNet.Core.Middlewares.MiddlewareHelpers.UseReuestResponseLogMidd(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            请求响应中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:DNet.Core.Middlewares.MiddlewareHelpers.UseSignalRSendMidd(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            SignalR中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:DNet.Core.Middlewares.MiddlewareHelpers.UseExceptionHandlerMidd(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            异常处理中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:DNet.Core.Middlewares.MiddlewareHelpers.UseIPLogMidd(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            IP请求中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:DNet.Core.Middlewares.RequRespLogMidd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:DNet.Core.Middlewares.RequRespLogMidd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:DNet.Core.Middlewares.RequRespLogMidd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="T:DNet.Core.Middlewares.SignalRSendMidd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:DNet.Core.Middlewares.SignalRSendMidd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:DNet.Core.Middlewares.SignalRSendMidd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.SignalR.IHubContext{DNet.Core.Hubs.ChatHub})">
            <summary>
            
            </summary>
            <param name="next"></param>
            <param name="hubContext"></param>
        </member>
        <member name="P:DNet.Core.Startup.Repository">
            <summary>
            log4net 仓储库
            </summary>
        </member>
        <member name="T:DNet.Core.SwaggerHelper.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:DNet.Core.SwaggerHelper.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义
            </summary>
        </member>
        <member name="F:DNet.Core.SwaggerHelper.CustomApiVersion.ApiVersions.V1">
            <summary>
            V1 版本
            </summary>
        </member>
        <member name="F:DNet.Core.SwaggerHelper.CustomApiVersion.ApiVersions.V2">
            <summary>
            V2 版本
            </summary>
        </member>
        <member name="T:DNet.Core.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:DNet.Core.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:DNet.Core.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:DNet.Core.SwaggerHelper.CustomRouteAttribute.#ctor(DNet.Core.SwaggerHelper.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
    </members>
</doc>
